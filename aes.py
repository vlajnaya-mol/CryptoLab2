import numpy as np


sbox = np.array((
        0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
        0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
        0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
        0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
        0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
        0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
        0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
        0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
        0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
        0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
        0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
        0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
        0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
        0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
        0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
        0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
        )).reshape(16,16)
inv_sbox = np.array((
        0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
        0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
        0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
        0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
        0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
        0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
        0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
        0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
        0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
        0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
        0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
        0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
        0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
        0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
        0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
        )).reshape(16,16)

rcon = [0x1]
for i in range(10):
    rcon.append((rcon[-1]<<1) ^ (0x11b & -(rcon[-1]>>7)))
rcon = [np.array([v, 0, 0, 0]) for v in rcon]


mix_col_mat = np.array([[2, 3, 1, 1],
                        [1, 2, 3, 1],
                        [1, 1, 2, 3],
                        [3, 1, 1, 2]])

inv_mix_col_mat = np.array([[0xe, 0xb, 0xd, 0x9],
                            [0x9, 0xe, 0xb, 0xd],
                            [0xd, 0x9, 0xe, 0xb],
                            [0xb, 0xd, 0x9, 0xe]])


def sub_word(word):
    """перетворення слова по s-box"""
    return np.array([sbox[byte//16 % 16, byte%16] for byte in word])

def rot_word(word):
    """поворот слова (зсув)"""
    return np.concatenate((word[1:], word[:1]))

def word_xor(a,b):
    """ксор між словами (масивами байтів)"""
    return np.bitwise_xor(a,b)

def g_mult(a, b):
    """чесно вкрадена з вікіпедії функція для множення байтів у GF"""
    p = 0
    for counter in range(8):
        if ((b & 1) != 0):
            p ^= a
        hi_bit_set = (a & 0x80) != 0
        a <<= 1
        if (hi_bit_set):
            a ^= 0x1B
        b >>= 1
    return p

def g_mult_mat(a, b):
    """матричний варіант g_mult"""
    p = np.zeros_like(a)
    for counter in range(8):
        p[(b & 1) != 0] ^= a[(b & 1) != 0]
        hi_bit_set = (a & 0x80) != 0
        a  = a << 1
        a[hi_bit_set] ^= 0x1B        
        b  = b >> 1
    return p

class AES:
    def __init__(self, key, Nk=4, Nr=10, Nb=4):
        self.key = key
        self.Nk, self.Nr, self.Nb = Nk, Nr, Nb
        self.expanded_key = self.key_expansion(key) # генерується розширений ключ для раундів
    
    def key_expansion(self, key):
        expanded_key = [np.array(key[i:i+4]) for i in range(0, len(key), 4)]

        i = len(expanded_key)
        while len(expanded_key) < self.Nb * (self.Nr+1):
            temp = expanded_key[-1]

            if i % self.Nk == 0:
                temp = word_xor(sub_word(rot_word(temp)), rcon[i//self.Nk - 1])

            elif self.Nk > 6 and i % self.Nk == 4:
                temp = sub_word(temp)

            expanded_key.append(word_xor(expanded_key[-self.Nk], temp))

            i = len(expanded_key)

        return np.array(expanded_key)

    def _forward(self):
        """налаштовує методи на шифрування даних"""
        self.sbox = sbox
        self.mix_col_mat = mix_col_mat
        self.shift_direction = 1
    
    def _backward(self):
        """налаштовує методи на дешифрування даних"""
        self.sbox = inv_sbox
        self.mix_col_mat = inv_mix_col_mat
        self.shift_direction = -1
        
    def add_round_key(self, state, words):
        """додає (ксор) ключ до стану"""
        words = words.reshape(4, -1).T
        return word_xor(state, words)

    def sub_bytes(self, state):
        """застосовує S-box на стані"""
        return self.sbox[state//16 % 16, state%16]

    def shift_rows(self, state):
        """зсуває рядки стану в ту чи іншу сторону"""
        return np.vstack([np.concatenate((state[i, self.shift_direction*i:], 
                                          state[i, :self.shift_direction*i])) 
                          for i in range(state.shape[0])])

    def mix_columns(self, state):
        """виконує операцію Mix Columns"""
        for col in range(state.shape[1]):
            mult = g_mult_mat(self.mix_col_mat, np.broadcast_to(state[:,col], mix_col_mat.shape))
            state[:,col] = np.bitwise_xor.reduce(mult, axis=1) % 256 
        return state

    def cipher(self, inp):
        """шифрувати вхідні дані"""
        self._forward()
        
        state = inp.reshape(4, -1).T
#         print_hex(state)
        state = self.add_round_key(state, self.expanded_key[:self.Nb])
#         print_hex(state)
        for round_ in range(1, self.Nr):
            state = self.sub_bytes(state)
#             print_hex(state)
            state = self.shift_rows(state)
#             print_hex(state)
            state = self.mix_columns(state)
#             print_hex(state)
            state = self.add_round_key(state, self.expanded_key[round_*self.Nb: (round_+1)*self.Nb])
#             print_hex(state)

        state = self.sub_bytes(state)
        state = self.shift_rows(state)
        state = self.add_round_key(state, self.expanded_key[self.Nr*self.Nb: (self.Nr+1)*self.Nb])
#         print_hex(state)
        return state.T.flatten()

    def inv_cipher(self, inp):
        """дешифрувати вхідні дані"""
        self._backward()
        
        state = inp.reshape(4, -1).T

        state = self.add_round_key(state, self.expanded_key[self.Nr*self.Nb: (self.Nr+1)*self.Nb])
        for round_ in range(self.Nr-1, 0, -1):
            state = self.shift_rows(state)
            state = self.sub_bytes(state)
            state = self.add_round_key(state, self.expanded_key[round_*self.Nb: (round_+1)*self.Nb])
            state = self.mix_columns(state)

        state = self.shift_rows(state)
        state = self.sub_bytes(state)
        state = self.add_round_key(state, self.expanded_key[:self.Nb])
        
        return state.T.flatten()

